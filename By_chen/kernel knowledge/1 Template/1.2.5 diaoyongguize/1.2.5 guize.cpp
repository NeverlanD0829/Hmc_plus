/*
    1.模版
    1.1模版的概念
        建立通用的模具,提高复用性
    1.2函数模版
        作用:建立通用函数,函数返回值类型和形参类型可不具体指定,用虚拟类型代表
        template<typename T>
        1.2.2函数模版注意事项
            自动类型推导,必须导出一致的数据类型T才可以使用
            模版必须要确定出T的数据类型才可以使用
        1.2.3函数模版案例
            案例描述:利用函数模版封装一个排序函数,可以对不同数据类型数组进行排序
            排序规则:从小到大,排序算法为选择排序.
        1.2.4普通函数和模版函数的区别
            普通函数调用时可以发生自动类型转换(隐式类型转换)
            函数模版调用时,如果利用自动类型推导,不会发生隐式类型转换
            如果利用显示指定类型的方式,可以发生隐式类型转换
        1.2.5 普通函数和函数模版的调用规则
            1.如果函数模版和普通函数都可以实现,优先使用普通函数
            2.可以通过空模版参数列表来强制调用函数模版
            3.函数模版也可以发生重载
            4.如果函数模版可以产生更好的匹配,优先调用函数模版
            注意:如果提供了模版,就不要提供普通函数版本,容易出现二义性.



*/

#include <iostream>
#include <string>
using namespace std;

//普通函数调用
void MyPrint(int a,int b)
{
    cout<<"普通函数的调用"<<endl;
}

//函数模版的调用
template <class T>
void MyPrint(T a,T b)
{
    cout<<"模版函数的调用"<<endl;
}

//重载模版的调用
template <class T>
void MyPrint(T a,T b,T c)
{
    cout<<"重载的模版调用"<<endl;
}

void test01()
{
    int a=10;
    int b=20;
    int c=30;
    char d='a';
    char e='b';

    MyPrint(a,b);           //1.优先调用普通函数调用
    MyPrint<>(a,b);         //2.通过空模版强制调用模版
    MyPrint(a,b,c);         //3.函数模版也可以重载
    MyPrint(d,e);           //4.函数模版能产生更好的匹配的话,优先采用函数模版  
}

int main()
{
    test01();
}