//引用的作用
    //给变量起别名
    //语法：   数据类型（与原名同类型） &别名=原名；

//引用的注意事项
    //引用必须初始化
    //一旦初始化就不可以更改了。

//引用做函数参数
    //作用：函数传参时，可利用引用的技术让形参修饰实参。
    //优点：可以简化指针修改实参

//引用函数返回值（返回值类型可以使引用）
    //作用：引用可以作为函数的返回值存在的
    //注意：不要返回局部变量引用
    //用法：函数调用作为左值

//引用的本质：
    //在c++内部实现是一个指针常量。

//常量的引用：
    //作用：常量引用主要修饰形参，防止误操作；
    //函数形参列表中，可以加 const 修饰形参，防止形参改变实参。

#include<iostream>
#include<string>
using namespace std;


//发现是引用，转换为 int * const ref=&a;
void showValue(const int& val)          //加 const 修饰形参，防止引用时形参改变实参
{
    //val=1000;
    cout<<"val="<<val<<endl; 
}


int main()
{
    int a=100;
    showValue(a);             //把a的值以引用的方式传入函数中
    cout<<"a="<<a<<endl;

    //int & ref=10;           //非法操作，引用必须引一块合法的内存空间
    
    const int ref=10;         //合法操作，加上const后，编译器将代码修改为  int temp=10;   const int & ref=temp;
    //ref=20;                 //不合法，加入const后变为只读，不可修改。  
    cout<<"ref:"<<ref<<endl;

    

    system("pause");
    return 0;
}


//结论：c++推荐使用引用技术，因为语法方便。引用的本质是指针常量，但所有的指针操作编译器都帮我们做了。