/*
    多态是C++面向对象三大特性之一。
    分类：
        静态多态：函数重载、运算符重载属于静态多态，复用函数名。
        动态多态：派生类（子类）、虚函数实现运行时多态
    区别：
        1、静态多态的函数地址 早绑定(编译阶段确定函数地址)
        2、动态多态的函数地址 晚绑定(运行阶段确定函数地址)
        函数重写的概念：函数返回值类型、函数名、参数列表完全相等。重写时virtual关键字可写可不写。

    多态类案例：计算器类
        描述：分别利用普通写法和多态写法，设计实现两个操作数进行运算的计算器类。
        多态优点：1.代码组织结构清晰
                 2.可读性强
                 3.利用前期和后期的扩展及维护

    纯虚函数和抽象类：
        多态中，通常父类中的虚函数的实现是毫无意义的，主要是调用子类重写的内容。可将纯虚函数改为纯虚函数。
        语法：  virtual 返回值类型  函数名  （参数列表）=0；
        * 当类中有了纯虚函数，这个类称为  抽象类。
        抽象类特点：
            1.无法实例化对象
            2.子类必须重写抽象类中的纯虚函数，否则也属于抽象类



 
*/

#include <iostream>
#include <string>
using namespace std;

class Base
{
    public:
        virtual void func()=0;
};

class Son:public Base
{
    public:
        virtual void func()             //  Son子类中也得重写抽象类中的纯虚函数，否则也属于抽象类
        {
            cout<<"func调用"<<endl;
        };
};

void test01()
{
    // Base b;                         //错误，抽象类无法实例化对象
    // base=new Base;                  //错误，抽象类无法实例化对象
    // Son s;                          //子类中重写了父类的纯虚函数，所以不报错。

    // Base *base=NULL;                   //创建了一个指向 Base 父类的指针
    // base=new Son;                      //分配了一个 Son 类的对象，并将其地址赋给了 base 指针。这是一个基类指针指向派生类对象的例子，利用了多态性质。
    Base *base=new Son;                //new的是那个对象，就调用那个对象里的函数。
    base->func();                      //指针调用了虚函数 func()。由于在 Son 类中重写了 func()，因此会调用 Son 类中的 func() 方法。这是因为  虚函数通过 指针 或 引用 调用时会根据对象的实际类型进行动态绑定。
    delete base;
}

int main()
{
    test01();

    system("pause");
    return 0;
}


/*
多态优点：1.代码组织结构清晰
         2.可读性强
         3.利用前期和后期的扩展及维护


*/
