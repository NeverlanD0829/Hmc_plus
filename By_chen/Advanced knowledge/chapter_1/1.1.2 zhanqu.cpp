// 栈区：
	// 由编译器自动分配释放，存放函数的参数值，局部变量等。
	// 注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放
	//栈区是用来存放局部变量的，比如函数内部定义的int a,int b,const int a,char p,char arr[ ]，还有函数的形参等等都是存放在栈区。
	//栈区的数据由编译器管理，调用完之后就自动释放，压栈，出栈。先进后出的原则，比如当你执行到函数调用的时候，编译器会先把下一条代码的地址压入栈中，
	//再把你调用的那个函数里的一些局部变量啊，形参啊等等压入栈中，等你函数调用执行完毕。栈就会把你调用的这个函数之前压入栈的变量和形参全部清除出栈，
	//之后根据下一条代码的地址，接着执行程序，以后的程序也都是这么执行。栈区是有大小的，一般是1M左右，所以别定义太大的数组。

// 堆区：
	// 有程序员分配释放，若程序员不释放，程序结束之后有操作系统回收
	// 在C++中主要利用new在堆区中开辟内存
	// int* p = new int(10);
	
//以上四区，代码区和全局区在生成.exe文件后就有了，双击.exe运行程序才会生成堆区和栈区。
// new运算符
// 在堆区开辟数据

// 堆区开辟的数据，由程序员手动开辟，手动释放，释放用delete


#include<iostream>
#include<string>
using namespace std;

//栈区数据的注意事项：不要返回局部变量的地址！（栈区的数据由编译器管理开辟和释放）
int* func()					//形参数据也会存放在栈区
{
	int a=10;					//局部变量存放在栈区，栈区内存数据在函数执行完后自动释放。
	return &a;					//返回局部变量的地址
}
int main()
{
	//接受func函数的返回值
	int*p=func();
	
	cout<<*p<<endl;				//不要返回局部变量的地址，栈区开辟的数据由编译器自动释放
	cout<<*p<<endl;

    system("pause");
	return 0;

}
