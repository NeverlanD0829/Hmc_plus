//指针的作用： 可以通过指针间接访问内存
    // 内存编号是从0开始记录的，一般用十六进制数字表示
    // 可以利用指针变量保存地址

//语法：  数据类型 * 变量名；
//指针变量和普通变量的区别：
    //  指针变量存放的是地址，普通变量存放的是数据；
    //  指针变量通过  *  操作符操作指针变量指向的内存空间，该过程称为解应用。



//指针也是种数据类型，那么这种数据类型占用多少内存空间？

#include<iostream>
using namespace std;

int main()
{
    //指针的定义
    int a=10;

    //指针定义语法： 数据类型 * 变量名 
    int *p;

    p=&a;               //  &为取址符。         指针指向变量a的地址
    cout<<"指针所占用的内存空间大小为："<<sizeof(p)<<endl;
    cout<<"指针所占用的内存空间大小为："<<sizeof(char *)<<endl;
    cout<<"指针所占用的内存空间大小为："<<sizeof(float *)<<endl;
    cout<<"指针所占用的内存空间大小为："<<sizeof(double *)<<endl;

    //指针类型在32位操作系统下是4个字节，在64位操作系统下是8字节。

    system("pause");
    return 0;
}


//总结：可以通过&符号获取变量的地址；      利用指针可以记录地址；    对指针变量解应用，可以操作指针所指向的内存。

